import json
from datetime import datetime, timedelta
from telegram import Bot
from telegram.ext import Application, CommandHandler
import time
import threading
from threading import Thread
import asyncio
import requests
import sqlite3
import logging

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó —Ç–∞ –ø–æ–º–∏–ª–æ–∫
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

CHECK_INTERVAL = 10  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö

print(f"333")  # –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É

async def main():
    """ –ì–æ–ª–æ–≤–Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–Ω """
    logging.info("–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Ñ—É–Ω–∫—Ü—ñ—ó
    print(f"222")  # –í–∏–≤–µ–¥–µ–Ω–Ω—è –¥–ª—è —Ç–µ—Å—Ç—É
    while True:
        new_prices = await get_current_prices()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–æ–≤–∏—Ö —Ü—ñ–Ω
        if new_prices:
            await check_price_changes(new_prices)  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–∏ —Ü—ñ–Ω
        await asyncio.sleep(CHECK_INTERVAL)  # –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–¥ –Ω–∞—Å—Ç—É–ø–Ω–æ—é –ø–µ—Ä–µ–≤—ñ—Ä–∫–æ—é

def get_current_price(symbol):
    """ –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏ –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É """
    url = f'https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}'
    logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω–∏ –¥–ª—è {symbol} –∑–∞ URL: {url}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É –¥–æ Binance
    
    try:
        response = requests.get(url)  # –í–∏–∫–æ–Ω–∞–Ω–Ω—è HTTP –∑–∞–ø–∏—Ç—É –¥–æ API Binance
        response.raise_for_status()  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–æ–º–∏–ª–∫–∏ HTTP
        data = response.json()  # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ JSON
        
        if 'price' in data:  # –Ø–∫—â–æ —Ü—ñ–Ω–∞ –ø—Ä–∏—Å—É—Ç–Ω—è –≤ –¥–∞–Ω–∏—Ö
            price = float(data['price'])  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è —Ü—ñ–Ω–∏ –≤ —á–∏—Å–ª–æ –∑ –ø–ª–∞–≤–∞—é—á–æ—é —Ç–æ—á–∫–æ—é
            logging.info(f"–ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞ {symbol}: {price}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
            return price
        else:
            logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ —Ü—ñ–Ω—É —É –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ Binance –¥–ª—è {symbol}")  # –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è, —è–∫—â–æ —Ü—ñ–Ω–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞
            return None 
    except requests.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–æ Binance: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑–∞–ø–∏—Ç—É
        return None

def create_connection():
    """ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö """
    try:
        conn = sqlite3.connect('crypto_bot.db')  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö SQLite
        logging.info("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö crypto_bot.db")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        return conn
    except sqlite3.Error as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        return None

def check_alerts():
    """ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤ """
    logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–∏—Ö –∞–ª–µ—Ä—Ç—ñ–≤")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–ª–µ—Ä—Ç—ñ–≤
    conn = create_connection()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    if conn is None:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        return
    
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM alerts")  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∞–ª–µ—Ä—Ç—ñ–≤ –∑ –ë–î
    alerts = cursor.fetchall()  # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç—ñ–≤
    
    for alert in alerts:
        alert_id = alert[0]  # ID –∞–ª–µ—Ä—Ç–∞
        symbol = alert[1].lstrip('/')  # –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏ (–±–µ–∑ —Å–ª–µ—à—É)
        alert_price = alert[2]  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ü—ñ–Ω–∞ –∞–ª–µ—Ä—Ç–∞
        chat_id = alert[3]  # ID —á–∞—Ç—É Telegram –¥–ª—è —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è
        
        logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–∞ {alert_id} –¥–ª—è {symbol} –Ω–∞ {alert_price}$")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
        current_price = get_current_price(symbol)  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ—ó —Ü—ñ–Ω–∏
        
        if current_price is not None and round(current_price, 4) == round(alert_price, 4):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –¥–æ—Å—è–≥–Ω—É—Ç–∞ —Ü—ñ–Ω–∞
            message = f"üö® {symbol} –¥–æ—Å—è–≥ {alert_price}$! –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {current_price}$."  # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logging.info(f"–ê–ª–µ—Ä—Ç —Å–ø—Ä–∞—Ü—é–≤–∞–≤: {message}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —Å–ø—Ä–∞—Ü—å–æ–≤—É–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞
            send_telegram_message(chat_id, message)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
            
            delete_alert(alert_id)  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ –ø—ñ—Å–ª—è —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è
    
    conn.close()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î

def delete_alert(alert_id):
    """ –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø—ñ—Å–ª—è –π–æ–≥–æ —Å–ø—Ä–∞—Ü—é–≤–∞–Ω–Ω—è """
    logging.info(f"–í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ {alert_id}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞
    conn = create_connection()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    if conn is None:
        logging.error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è
        return
    
    cursor = conn.cursor()
    cursor.execute("DELETE FROM alerts WHERE id = ?", (alert_id,))  # –í–∏–¥–∞–ª–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ –∑ –ë–î
    conn.commit()  # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
    conn.close()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
    logging.info(f"–ê–ª–µ—Ä—Ç {alert_id} —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è


def send_telegram_message(chat_id, message):
    """ –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram """
    bot_token = 'YOUR_BOT_TOKEN'  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø—É –¥–æ Telegram API
    url = f'https://api.telegram.org/bot{bot_token}/sendMessage'  # URL –¥–ª—è –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    payload = {
        'chat_id': chat_id,  # ID —á–∞—Ç—É, –∫—É–¥–∏ –Ω–∞–¥—Å–∏–ª–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        'text': message  # –¢–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    }
    logging.info(f"–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram: {message}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    try:
        requests.post(url, data=payload)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è POST –∑–∞–ø–∏—Ç—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    except requests.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É Telegram: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫ –∑–∞–ø–∏—Ç—É

def check_alerts_periodically():
    """ –ó–∞–ø—É—Å–∫–∞—î –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –∞–ª–µ—Ä—Ç—ñ–≤ —É —Ñ–æ–Ω–æ–≤–æ–º—É –ø–æ—Ç–æ—Ü—ñ """
    while True:
        logging.info("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç—ñ–≤ —É —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
        check_alerts()  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∞–ª–µ—Ä—Ç—ñ–≤
        time.sleep(3)  # –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞–º–∏

alert_thread = threading.Thread(target=check_alerts_periodically)  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¥–ª—è —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
alert_thread.daemon = True  # –ü–æ—Ç—ñ–∫ –±—É–¥–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ñ –æ—Å–Ω–æ–≤–Ω–æ—ó –ø—Ä–æ–≥—Ä–∞–º–∏
alert_thread.start()  # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

def add_alert(symbol, price, chat_id):
    """ –î–æ–¥–∞—î –Ω–æ–≤–∏–π –∞–ª–µ—Ä—Ç —É –±–∞–∑—É –¥–∞–Ω–∏—Ö """
    conn = create_connection()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    cursor = conn.cursor()
    cursor.execute("INSERT INTO alerts (symbol, price, chat_id) VALUES (?, ?, ?)", (symbol, price, chat_id))  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞
    conn.commit()  # –ó–∞—Å—Ç–æ—Å—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω –¥–æ –ë–î
    conn.close()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    logging.info(f"–ê–ª–µ—Ä—Ç –¥–æ–¥–∞–Ω–æ: {symbol} - {price}$ –¥–ª—è —á–∞—Ç—É {chat_id}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –¥–æ–¥–∞–≤–∞–Ω–Ω—è

def check_alert(symbol, price):
    """ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î –∑–∞–¥–∞–Ω–∏–π –∞–ª–µ—Ä—Ç """
    conn = create_connection()  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM alerts WHERE symbol = ? AND price = ?", (symbol, price))  # –ü–æ—à—É–∫ –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î
    alert = cursor.fetchone()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
    conn.close()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è
    return alert  # –ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞, —è–∫—â–æ –∑–Ω–∞–π–¥–µ–Ω–∏–π

def is_valid_symbol(symbol):
    """ –ü–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —ñ—Å–Ω—É—î —Å–∏–º–≤–æ–ª –Ω–∞ Binance """
    symbol = symbol.lstrip('/')  # –í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–ª–µ—à—É –Ω–∞ –ø–æ—á–∞—Ç–∫—É, —è–∫—â–æ –≤—ñ–Ω —î
    url = f'https://fapi.binance.com/fapi/v1/ticker/price?symbol={symbol.upper()}'  # URL –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–≤–æ–ª—É
    logging.info(f"–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É: {symbol}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    try:
        response = requests.get(url)  # HTTP –∑–∞–ø–∏—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–≤–æ–ª—É
        data = response.json()  # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        return 'price' in data  # –Ø–∫—â–æ —î –ø–æ–ª–µ 'price', —Ç–æ —Å–∏–º–≤–æ–ª –≤–∞–ª—ñ–¥–Ω–∏–π
    except requests.RequestException as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏–º–≤–æ–ª—É {symbol}: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
        return False

async def add_alert_command(update, context):
    """ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram """
    if len(context.args) != 2:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /addalert <—Å–∏–º–≤–æ–ª> <—Ü—ñ–Ω–∞>")
        return

    symbol = context.args[0].upper()  # –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏, –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∏–π –¥–æ –≤–µ—Ä—Ö–Ω—å–æ–≥–æ —Ä–µ–≥—ñ—Å—Ç—Ä—É
    price = float(context.args[1])  # –¶—ñ–Ω–∞, –Ω–∞ —è–∫—É –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î—Ç—å—Å—è –∞–ª–µ—Ä—Ç
    chat_id = update.message.chat_id  # ID —á–∞—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ Telegram

    if not is_valid_symbol(symbol):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∞–ª—ñ–¥–Ω–æ—Å—Ç—ñ —Å–∏–º–≤–æ–ª—É
        await update.message.reply_text(f"–°–∏–º–≤–æ–ª {symbol} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π –Ω–∞ Binance. –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Å–∏–º–≤–æ–ª.")
        return

    add_alert(symbol, price, chat_id)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞ –≤ –ë–î
    await update.message.reply_text(f"–ê–ª–µ—Ä—Ç –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Ü—ñ–Ω—É {price}$.")  # –°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞

async def check_alert_command(update, context):
    """ –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–ª–µ—Ä—Ç–∞ —á–µ—Ä–µ–∑ Telegram """
    if len(context.args) != 2:  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—ñ —Ñ–æ—Ä–º–∞—Ç—É –∫–æ–º–∞–Ω–¥–∏
        await update.message.reply_text("–ü—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç: /checkalert <—Å–∏–º–≤–æ–ª> <—Ü—ñ–Ω–∞>")
        return
    
    symbol = context.args[0].upper()  # –°–∏–º–≤–æ–ª –º–æ–Ω–µ—Ç–∏
    price = float(context.args[1])  # –¶—ñ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
    
    conn = create_connection()  # –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
    cursor = conn.cursor()
    
    cursor.execute("SELECT * FROM alerts WHERE symbol = ? AND price = ?", (symbol, price))  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∞–ª–µ—Ä—Ç–∞
    alert = cursor.fetchone()  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–æ–≥–æ –∑–Ω–∞–π–¥–µ–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞
    
    conn.close()  # –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è

    if alert:
        await update.message.reply_text(f"–ê–ª–µ—Ä—Ç –¥–ª—è {symbol} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ —Ü—ñ–Ω—É {price}$.")  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∞–ª–µ—Ä—Ç–∞
    else:
        await update.message.reply_text(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–ª–µ—Ä—Ç–∞ –¥–ª—è {symbol} –Ω–∞ —Ü—ñ–Ω—É {price}$.")  # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å –∞–ª–µ—Ä—Ç–∞

TOKEN = "7567505791:AAE5Yqbd7gG9ydsx2_inJJmnS1Ln6rmh2Ts"  # –¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram

application = Application.builder().token(TOKEN).build()  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –æ–±'—î–∫—Ç–∞ –¥–æ–¥–∞—Ç–∫—É –¥–ª—è Telegram –±–æ—Ç–∞

application.add_handler(CommandHandler("addalert", add_alert_command))  # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è –∞–ª–µ—Ä—Ç–∞
application.add_handler(CommandHandler("checkalert", check_alert_command))  # –û–±—Ä–æ–±–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∞–ª–µ—Ä—Ç–∞

def tg_start_pool():
    """ –ó–∞–ø—É—Å–∫–∞—î Telegram –±–æ—Ç –Ω–∞ –ø–æ—Å—Ç—ñ–π–Ω–æ–º—É polling –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤—ñ–¥ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ """
    application.run_polling()  # –ó–∞–ø—É—Å–∫ polling –±–æ—Ç–∞ –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω—å

tg_pool_thread = None  # –ó–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Ç–æ–∫—É, —â–æ –æ–±—Ä–æ–±–ª—è—î polling

CHAT_ID_FILE = "chat_ids.json"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è ID —á–∞—Ç—ñ–≤
try:
    with open(CHAT_ID_FILE, "r") as file:
        config = json.load(file)  # –ß–∏—Ç–∞–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –∑ JSON —Ñ–∞–π–ª—É
except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
    print(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è JSON: {e}")  # –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ JSON
    config = {"TOKEN": "", "CHAT_ID": []}  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ä–æ–∂–Ω—å–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    with open(CHAT_ID_FILE, "w") as file:
        json.dump(config, file)  # –ó–∞–ø–∏—Å –ø–æ—Ä–æ–∂–Ω—å–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó –¥–æ —Ñ–∞–π–ª—É

TOKEN = config.get("TOKEN", "")  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–æ–∫–µ–Ω—É –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
CHAT_IDS = config.get("CHAT_ID", [])  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —á–∞—Ç ID –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó

if not TOKEN:
    raise ValueError("–¢–æ–∫–µ–Ω –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ –≤—ñ–Ω –ø–æ—Ä–æ–∂–Ω—ñ–π!")  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω—É

BASE_URL = "https://fapi.binance.com"  # –û—Å–Ω–æ–≤–Ω–∏–π URL –¥–ª—è API Binance
ENDPOINT = "/fapi/v1/ticker/price"  # API –µ–Ω–¥–ø–æ—ñ–Ω—Ç –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ü—ñ–Ω
THRESHOLDS = [0.01, 0.04, 0.09, 0.20]  # –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∑–º—ñ–Ω —Ü—ñ–Ω–∏, —è–∫—ñ –±—É–¥—É—Ç—å –≤—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏—Å—å
CHECK_INTERVAL = 1.5  # –Ü–Ω—Ç–µ—Ä–≤–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Ü—ñ–Ω —É —Å–µ–∫—É–Ω–¥–∞—Ö

bot = Bot(token=TOKEN)  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram –±–æ—Ç–∞ –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é —Ç–æ–∫–µ–Ω—É

price_history = {}  # –ó–±–µ—Ä—ñ–≥–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—ñ–Ω –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É

async def get_current_prices():
    """ –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—ñ —Ü—ñ–Ω–∏ –¥–ª—è –≤—Å—ñ—Ö –º–æ–Ω–µ—Ç –Ω–∞ Binance """
    try:
        response = requests.get(BASE_URL + ENDPOINT, timeout=5)  # –ó–∞–ø–∏—Ç –¥–æ API Binance
        print(f"–ó–∞–ø–∏—Ç –¥–æ API Binance, —Å—Ç–∞—Ç—É—Å-–∫–æ–¥: {response.status_code}")
        if response.status_code == 200:
            prices = response.json()  # –ü–∞—Ä—Å–∏–Ω–≥ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            return {item['symbol']: float(item['price']) for item in prices}  # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è —Å–ª–æ–≤–Ω–∏–∫–∞ —Ü—ñ–Ω
        else:
            print(f"–ü–æ–º–∏–ª–∫–∞ {response.status_code}: {response.text}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
            return {}
    except requests.exceptions.RequestException as e:
        print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –¥–æ API: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ –∑–∞–ø–∏—Ç—É
        return {}

async def check_price_changes(new_prices):
    """ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∑–º—ñ–Ω–∏ —Ü—ñ–Ω —ñ –Ω–∞–¥—Å–∏–ª–∞—î —Å–ø–æ–≤—ñ—â–µ–Ω–Ω—è, —è–∫—â–æ –∑–º—ñ–Ω–∏ –ø–µ—Ä–µ–≤–∏—â—É—é—Ç—å –∑–∞–¥–∞–Ω—ñ –ø–æ—Ä–æ–≥–∏ """
    now = datetime.now()  # –ü–æ—Ç–æ—á–Ω–∏–π —á–∞—Å
    messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

    for symbol, new_price in new_prices.items():  # –î–ª—è –∫–æ–∂–Ω–æ—ó –º–æ–Ω–µ—Ç–∏
        data = price_history.get(symbol)  # –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó —Ü—ñ–Ω –¥–ª—è —Å–∏–º–≤–æ–ª—É
        
        if data is None:
            price_history[symbol] = {'open_price': new_price, 'last_checked': now}  # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —ñ—Å—Ç–æ—Ä—ñ—ó
            continue

        open_price = data['open_price']  # –ü–æ—á–∞—Ç–∫–æ–≤–∞ —Ü—ñ–Ω–∞ –º–æ–Ω–µ—Ç–∏
        last_checked = data['last_checked']  # –ß–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

        if now - last_checked >= timedelta(minutes=5):  # –Ø–∫—â–æ –∑ —á–∞—Å—É –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π—à–ª–æ –±—ñ–ª—å—à–µ 5 —Ö–≤–∏–ª–∏–Ω
            price_history[symbol] = {'open_price': new_price, 'last_checked': now}  # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
            continue

        change = (new_price - open_price) / open_price  # –û–±—á–∏—Å–ª–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
        abs_change = abs(change)  # –ê–±—Å–æ–ª—é—Ç–Ω–∞ –∑–º—ñ–Ω–∞ —Ü—ñ–Ω–∏

        for threshold in THRESHOLDS:  # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –ø–æ—Ä–æ–≥—É
            if abs_change >= threshold and not data.get(f'notified_{threshold}', False):  # –Ø–∫—â–æ –∑–º—ñ–Ω–∞ –ø–µ—Ä–µ–≤–∏—â—É—î –ø–æ—Ä—ñ–≥
                direction = "üü¢" if change > 0 else "üî¥"  # –í–∏–∑–Ω–∞—á–∞—î–º–æ –Ω–∞–ø—Ä—è–º–æ–∫ –∑–º—ñ–Ω–∏
                change_percent = abs_change * 100  # –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—è –∑–º—ñ–Ω–∏ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∏
                message = f"{direction} {symbol} BINANCE 5m {change_percent:.1f}%"  # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                messages.append(message)  # –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                price_history[symbol][f'notified_{threshold}'] = True  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                logging.info(f"–ó–º—ñ–Ω–∞ —Ü—ñ–Ω–∏ {symbol}: {change_percent:.1f}% (–ø–æ—Ä—ñ–≥ {threshold})")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–º—ñ–Ω–∏ —Ü—ñ–Ω–∏
                break
        else:
            price_history[symbol]['last_checked'] = now  # –û–Ω–æ–≤–ª–µ–Ω–Ω—è —á–∞—Å—É –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏

    await send_notifications(messages)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

async def send_notifications(messages):
    """ –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —á–∞—Ç—É """
    if messages:
        full_message = "\n".join(messages)  # –û–±'—î–¥–Ω–∞–Ω–Ω—è –≤—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        for chat_id in CHAT_IDS:  # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ ID —á–∞—Ç—É
            try:
                await bot.send_message(chat_id=chat_id, text=full_message)  # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                logging.info(f"–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–æ {chat_id}: {full_message}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è —É—Å–ø—ñ—Ö—É
            except Exception as e:
                logging.error(f"–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –¥–æ {chat_id}: {e}")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏

if __name__ == "__main__":
    logging.info("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ—Ç–æ–∫—É")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–∏
    import nest_asyncio
    nest_asyncio.apply()  # –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è nest_asyncio –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∏—Ö —Ñ—É–Ω–∫—Ü—ñ–π –≤ —Å–µ—Ä–µ–¥–æ–≤–∏—â—ñ, —è–∫–µ –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î —ó—Ö –Ω–∞—Ç–∏–≤–Ω–æ

    tg_pool_thread = threading.Thread(target=tg_start_pool)  # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É –¥–ª—è –∑–∞–ø—É—Å–∫—É Telegram –±–æ—Ç–∞
    tg_pool_thread.daemon = True  # –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –ø–æ—Ç–æ–∫—É —è–∫ daemon, —â–æ–± –≤—ñ–Ω –∑–∞–≤–µ—Ä—à—É–≤–∞–≤—Å—è —Ä–∞–∑–æ–º –∑ –æ—Å–Ω–æ–≤–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º
    tg_pool_thread.start()  # –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫—É

    asyncio.run(main())  # –ó–∞–ø—É—Å–∫ –≥–æ–ª–æ–≤–Ω–æ—ó –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ—ó —Ñ—É–Ω–∫—Ü—ñ—ó
    logging.info("–û—Å–Ω–æ–≤–Ω–∏–π –ø—Ä–æ—Ü–µ—Å –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π")  # –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø—Ä–æ—Ü–µ—Å—É
